---
title: "Client Report - Relationships in Baseball"
subtitle: "Course DS 250"
author: "Logan Clark"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---
```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```

## Elevator pitch

There were only two players in the history of baseball that went to BYU-Idaho and then moved on to play at higher levels in baseball. There were a lot of ball players that have played one game and gotten a hit making them have a good batting average. The ones that impress me the most were the ones with more than 100 games and had over a 600 batting average. Cleveland has had way bigger drops in salary and have payed the least when that happens. Oakland has followed the trend of going up and getting pay increases.

```{python}
#| label: project data
#| code-summary: Read and format project data
# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
con = sqlite3.connect(sqlite_file)
```


## Professional BYU-Idaho Players

Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.

There are only two players that went to BYU-Idaho and then went on to play at a higher level. They were lindsma01 and stephga01.

```{python}
#| label: Q1
#| code-summary: Read and format data
# Include and execute your code here
q = '''
SELECT DISTINCT collegeplaying.playerID
,      collegeplaying.schoolID
,      salaries.salary
,      salaries.yearID
,      salaries.teamID
FROM   collegeplaying
LEFT JOIN   salaries
ON     salaries.playerID = collegeplaying.playerID
WHERE  collegeplaying.schoolID = 'idbyuid'
ORDER BY salaries.salary DESC;
'''

df = pd.read_sql_query(q,con)
df
```

## Batting Averages

This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)

A. Write an SQL query that provides playerID, yearID, and     batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.

There are a lot of players with only one hit and one at bat which in turns makes them have a good batting average.

```{python}
#| label: Q2
#| code-summary: Read and format data
# Include and execute your code here
q = '''
SELECT DISTINCT playerID
,    yearID
,    H
,    AB
,    ROUND((1.0*H)/AB, 3) as 'BA'
FROM batting
WHERE AB >= 1
ORDER BY ROUND((1.0*H)/AB, 3) DESC
,        playerID ASC
LIMIT 5;
'''

df = pd.read_sql_query(q,con)
df
```

B. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.

There is a drop in batting average. Players who have more games too a .400 hit to their batting average.
``` {python}
q = '''
SELECT playerID
,    yearID
,    H
,    AB
,    ROUND((1.0*H)/AB, 3) as 'BA'
FROM batting
WHERE AB >= 10
ORDER BY ROUND((1.0*H)/AB, 3) DESC
,        playerID ASC
LIMIT 5;
'''

df = pd.read_sql_query(q,con)
df
```

C. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.

Those with over 100 at bats had a significant drop in batting average because they had more at bats and had more chances to strike out or get a hit.
```{python}
q = '''
SELECT DISTINCT playerID
,    yearID
,    SUM(H) AS 'Total Hits'
,    SUM(AB) AS 'Total At Bats'
,    ROUND((1.0*H)/AB, 3) as 'BA'
FROM batting
GROUP BY playerID
HAVING AB >= 100
LIMIT 5;
'''

df = pd.read_sql_query(q,con)
df

```

## Cleveland Compared to Oakland

Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?

Cleveland had a huge paycut between the years of 2001 and 2004. On the other hand Oakland has consistenly getting a pay increase. On average I would want to play for Oakland because there is potential that I could increase my salary more than if I stayed at Cleveland.

```{python}
#| label: Q3
#| code-summary: Read and format data
# Include and execute your code here
q = '''
SELECT yearID
,      teamID
,      AVG(salary) AS avg_salary
FROM salaries
WHERE yearID BETWEEN 2000 AND 2016
AND teamID IN ('CLE', 'OAK')
GROUP BY yearID, teamID;

'''

df = pd.read_sql_query(q,con)
df

```
```{python}
fig = px.line(df, x='yearID', y='avg_salary', color='teamID', title='Average Salary Comparison between CLE and OAK from 2000 to 2016')

fig.update_layout(xaxis_title='Year', yaxis_title='Average Salary')

fig.add_annotation(x=2004, y=1143977, text='Lowest Salary. 1.1M', showarrow=True, arrowhead=1, ax=0, ay=20)

fig.add_annotation(x=2014, y=3159688, text='Highest Salary. 3.1M', showarrow=True, arrowhead=1, ax=0, ay=-40)

fig.add_annotation(x=2016, y=2893541, text='Highest Salary. 2.9M', showarrow=True, arrowhead=1, ax=20, ay=40)

fig.add_annotation(x=2000, y=1184123, text='Lowest Salary. 1.9M', showarrow=True, arrowhead=1, ax=0, ay=-40)

fig.show()
```